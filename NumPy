import numpy as np

array = np.array([1,2,3,4]) #1D array

array2d = np.array([[1, 2, 3], [4, 5, 6]]) #2D array has 1D arrays as its elements.

array3d = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]]) #3D array has 2d arrays as its elements.

print(type(array))
print(array3d.ndim) #Print the dimension of an array.
print(array.dtype)

print(array[0])
print(array[1:4]) #2nd to 4th element. (not including array[4]).
print(array[1:]) #from array[1] to end.
print(array[:4]) #beginning to array[3].
print(array[-3:-1]) #Does not include the very last element.
print(array[1:4:2]) #steps of 2.
print(array[::2]) #All elements in steps of 2.

print(array2d[1,2]) #Index is (row,column) - go down and then across. 2nd row, 3rd column.
print(array2d[1,-1]) #2nd row, last column.
print(array2d[0:2, 2]) #Returns element [2] from 1st and 2nd arrays.
print(array2d[0:2, 1:3]) #for both rows [0:2], get the 1st to 3rd element [1:4].

print(array3d[0, 1, 2]) #1st array, 2nd array, 3rd element.

arr_s = np.array([1, 2, 3, 4], dtype='S') #Create array with type string.
print(arr_s.dtype)

array_r = np.array([1.1, 2.1, 3.1])
array_i = array_r.astype('i') #Convert the real array into an integer array (decimal to whole number).
print(array_i)
print(array_i.dtype)

print(array2d.shape) #Shape is measured down and across.

arr = np.array([1, 2, 3, 4, 5])
x = arr.copy() #Make a copy of an array.
arr[0] = 42
print(arr)
print(x)

arr = np.array([1, 2, 3, 4, 5])
x = arr.view() #Making a view of an array.
arr[0] = 42
print(arr) 
print(x) #Changes made to the original array will also affect the view of the array (unlike for copy).
#Changing the view will also change the original array.

arr = np.array([1, 2, 3, 4, 5])
x = arr.copy()
y = arr.view()
#Base shows which array owns the data.
print(x.base) #Outputs "None" because when we copy and array, it owns its own data.
print(y.base) #A view of an array does not own its own data.

arr = np.array([1, 2, 3, 4], ndmin=5) #Create array with 5 dimensions.
print(arr)
print('shape of array :', arr.shape)

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) #1D array.
newarr = arr.reshape(4, 3) #Convert the 1D array to 2D array with 4 rows and 3 columns.
print(newarr)
print(arr.reshape(4, 3).base) #This shows the original array (arr); reshaping creates a view and not a copy.

newarr2 = arr.reshape(2, 3, 2) #Convert the 1D array into 3D array with 2 rows, 3 columns and 2 arrays.
newarr3 = arr.reshape(2, 3, -1) #If the number of one of the dimensions is unknown, add -1- this gives the same result as the line above.
print(newarr2)
print(newarr3)
#A 2D array will have 2 outer square brackets and a 3D array will have 3.

newarr = newarr3.reshape(-1) #Convert a 3D array into a 1D array.
print(newarr)

arr = np.array([1, 2, 3])
for x in arr:
  print(x) #Iterate using array.

arr = np.array([[1, 2, 3], [4, 5, 6]]) 
for x in arr:
  print(x) #For 2D array, it'll go through each row so will return 2 arrays.
for x in arr:
  for y in x:
    print(y) #To return each individual elements.

arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
print(arr)
for x in arr:
  print(x)
for x in arr:
  for y in x:
    for z in y:
      print(z)

arr = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])
print(arr)
for x in np.nditer(arr):
  print(x) #Easier way of iterating.
  
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
for x in np.nditer(arr[:,::2]): #arr[array1,array2:steps]
  print(x) #Iterating with different step sizes.
  
arr = np.array([1, 2, 3])
for idx, x in np.ndenumerate(arr):
  print(idx, x) #np.ndenumerate adds an index while listing the elements.
  
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
for idx, x in np.ndenumerate(arr):
  print(idx, x) #The index of a 2D array will have 2 numbers (row, column).
  
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
arr = np.concatenate((arr1, arr2)) #np.concatenate puts two arrays together side-by-side.
print(arr)

arr1 = np.array([[1, 2], [3, 4]])
arr2 = np.array([[5, 6], [7, 8]])
arr = np.concatenate((arr1, arr2),axis=1) #If we concat 2 2D arrays, it stays as a 2D array.
print(arr)
arr = np.stack((arr1, arr2),axis=1) #If we stack 2 2D arrays, it becomes a 3D array.
print(' ')
print(arr)

arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
arr = np.stack((arr1, arr2)) #If axis=0, the rows are stacked on top of each other. If axis=1, the rows are turned into columns first.
print(arr)

arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
arr = np.hstack((arr1, arr2)) #Horizontal stack.
print(arr)

arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
arr = np.vstack((arr1, arr2)) #Vertical stack.
print(arr)

arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
arr = np.dstack((arr1, arr2)) #Stack along depth (height).
print(arr)

arr = np.array([1, 2, 3, 4, 5, 6])
newarr = np.array_split(arr, 3) #Split into 3 parts
print(newarr)
print(newarr[0]) #Print each of the arrays individually.
print(newarr[1])
print(newarr[2])

arr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])
newarr = np.array_split(arr, 3) #Splits a 2D array into 3 seperate 2D arrays.
print(newarr)
print(newarr[0])
print(newarr[1])
print(newarr[2])

arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]])
newarr = np.array_split(arr, 3, axis=1) #Splits the array along the row.
print(newarr)
print(newarr[0]) #First element of each row.
print(newarr[1]) #Second element of each row.
print(newarr[2]) #Third element of each row.
newarr = np.hsplit(arr, 3) #An alternative to array_split is h_split.
print(newarr)

arr = np.array([1, 2, 3, 4, 5, 4, 4])
x = np.where(arr == 4) #Searches the array for a specific value and returns the index for that value.
print(x)

arr = np.array([6, 7, 8, 9])
x = np.searchsorted(arr, 7) #Returns the index for which 7 should be inserted to maintain the order of the array.
print(x)

arr = np.array([6, 7, 8, 9])
x = np.searchsorted(arr, 7, side='right') #seachsorted but starting from the right.
print(x)

arr = np.array([3, 2, 0, 1])
print(np.sort(arr)) #Sort ascending.

arr = np.array([[3, 2, 4], [5, 0, 1]])
print(np.sort(arr)) #For 2D arrays, sort each individual array.

arr = np.array([41, 42, 43, 44])
x = [True, False, True, False]
newarr = arr[x]
print(newarr) #Arr is filtered by X to only give the values with "True".


arr = np.array([41, 42, 43, 44])
# Create an empty list
filter_arr = []
# go through each element in arr
for element in arr:
  # if the element is higher than 42, set the value to True, otherwise False:
  if element > 42:
    filter_arr.append(True)
  else:
    filter_arr.append(False)
newarr = arr[filter_arr]
print(filter_arr)
print(newarr)

arr = np.array([41, 42, 43, 44])
filter_arr = arr > 42 #Create filter directly without using for statement.
newarr = arr[filter_arr]
print(filter_arr)
print(newarr)

arr = np.array([1, 2, 3, 4, 5, 6, 7])
newarr = arr[arr % 2 == 0] #Can just put the filter condition inside the square brackets instead of creating a new filter array.
print(newarr)
