import csv
from abc import ABC, abstractmethod

def load_books_from_csv():
    books = []
    with open("books.csv", mode='r', newline='') as csv_file:
        reader = csv.DictReader(csv_file)
        for row in reader:
            book = Book(row['isbn'], row['title'], row['author'], row['description'])
            books.append(book)
    return books
     
class It:
    def __init__(self, li):
        self.li = li
        self.index = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.index < len(self.li):
            result = self.li[self.index]
            self.index += 1
            return result
        else:
            raise StopIteration

class Book:
    def __init__(self, isbn, title, author, description):
        self._isbn = isbn
        self._title = title
        self._author = author
        self._description = description
        
    @property
    def isbn(self):
        return self._isbn
    
    @isbn.setter
    def isbn(self,value):
        self._isbn = value
        
    @property
    def title(self):
        return self._title
    
    @title.setter
    def title(self,value):
        self._title = value
        
    @property
    def author(self):
        return self._author
    
    @author.setter
    def author(self,value):
        self._author = value
        
    @property
    def description(self):
        return self._description
    
    @description.setter
    def description(self,value):
        self._description = value
    
    def __str__(self):
        return f"isbn: {self.isbn} title: {self.title} author: {self.author} description: {self.description}"
    
    def search_book(search):
        print("\nResults:")
        iterator = It(books)
        found = False  # Initialize found to False

        while True:
            try:
                book = next(iterator)
                if search.lower() in book.title.lower():
                    print(f"ISBN: {book.isbn}, Title: {book.title}, Author: {book.author}, Description: {book.description}")
                    found = True
            except StopIteration:
                if not found:
                    print("Book not found")
                break


class ShoppingCart(ABC):
    def __init__(self):
        self.items = []

    @abstractmethod
    def add_item(self, unregistered_basket):
        pass

    @abstractmethod
    def remove_item(self, isbn):
        pass

class UnregisteredShoppingCart(ShoppingCart):
    def add_item(self, unregistered_basket, books):
        iterator = It(books)
        while True:
            try:
                book = next(iterator)
                if book.isbn == isbn_input:
                    unregistered_basket.append((book.isbn, book.title, book.author))
            except StopIteration:
                break

    def remove_item(self, remove):
        if remove == 'all':
            unregistered_basket.clear()

        for item in unregistered_basket:
            if remove == item[0]:
                unregistered_basket.remove(item)
                
class RegisteredShoppingCart(ShoppingCart):
    def add_item(self, registered_basket, books):
        iterator = It(books)
        while True:
            try:
                book = next(iterator)
                if book.isbn == isbn_input:
                    registered_basket.append((book.isbn, book.title, book.author))
            except StopIteration:
                break

    def remove_item(self, remove):
        if remove == 'all':
            basket_dict[key].clear()

        for item in basket_dict[key]:
            if remove == item[0]:
                basket_dict[key].remove(item)
                
    def checkout(self,order_history,basket):
        order_history[key].append(basket_dict[key][:])
        basket_dict[key].clear()
        print("\nPurchase successful!.\n")

books = load_books_from_csv()
unregistered_basket = []
basket_dict = {}
order_history = {}
logged_in = False
login_dict = {}
account_no = 101
valid_isbn = []

unregistered_cart = UnregisteredShoppingCart()
registered_cart = RegisteredShoppingCart()

for book in books:
    valid_isbn.append((book.isbn))
    #print(book.isbn)

class InvalidISBNError(Exception):
    def __init__(self, isbn):
        super().__init__(f"Book with ISBN- {isbn} does not exist.")
        self.isbn = isbn
        
def validate_isbn(isbn,valid_isbn):
    if isbn not in valid_isbn:
        raise InvalidISBNError(isbn)

while True:

    while True:
        try:
            choice = int(input("\nView all books: 0\nSearch books: 1\nAdd items to basket: 2\nView/Modify basket and checkout: 3\nRegister: 4\nLogin: 5\n"))
            break
        except ValueError:
            print("Please enter a valid integer value")

    if choice == 0:
        for book in books:
            print(book)
    
    elif choice == 1:  
        search = input("\nPlease enter the title of the book:\n")
        Book.search_book(search)
    
    elif choice == 2:
        while True:
            try:
                isbn_input = (input("Please enter an isbn code"))
                validate_isbn(isbn_input,valid_isbn)
                print("Valid")
                break
            except InvalidISBNError as e:
                print(f"Error: {e}")
        
        unregistered_cart.add_item(unregistered_basket,books)
        print('Book added to basket\n')
        print("Basket:")
        for item in unregistered_basket:
            print(f"ISBN: {item[0]} Title: {item[1]}")
            
    elif choice == 3:
        print("\nCurrent basket:")
        for item in unregistered_basket:
            print(f"ISBN: {item[0]} Title: {item[1]}")
            
        basket_option = input("\nModify your basket: Type 'm':\nProceed to checkout: Type 'c'\nReturn to menu: Hit 'Enter'\n")
        
        if basket_option == 'm':
            remove = input("\nTo remove an item: Type its ISBN code\nTo clear basket: type 'all'\n")
            unregistered_cart.remove_item(remove)
            
            print("\nUpdated basket:")
            for item in unregistered_basket:
                print(f"ISBN: {item[0]} Title: {item[1]}")
                
        if basket_option == 'c':
            checkout_choice = int(input('\nCreate account and proceed to checkout: 0\nLogin and proceed to checkout: 1\n'))
            if checkout_choice == 0:  # Corrected to compare with string '1'
                choice = 4
                #break # Corrected to use string '3' as well
            if checkout_choice == 1:
                choice = 5

    while choice == 4:
        #account_no = random.randint(1, 100)
        print("Welcome to the registration page!")
        username_input = input("\nPlease enter a username:\n")
        password_input = input("\nPlease enter a password:\n")
        first_name = input("\nPlease enter your first name:\n")
        last_name = input("\nPlease enter your last name:\n")
        
        login_dict[account_no] = [username_input, password_input, first_name, last_name]
        
        if unregistered_basket:
            basket_dict[account_no] = unregistered_basket
            order_history[account_no] = []
        else:
            basket_dict[account_no] = []
            order_history[account_no] = []

        account_no += 1
        print("Registration successful!")
        print("Please now proceed to login with your details")
        print(login_dict)
        choice = 4
        break

    if choice == 5: 
        while logged_in == False:
            username_input = input("\nPlease enter a username:\n")
            password_input = input("\nPlease enter a password:\n")

            for key, value in login_dict.items():
                if username_input == value[0] and password_input == value[1]:
                    print('--------------------------')
                    print('Login successful')
                    print("Welcome to the bookstore")
                    print('--------------------------')
                    logged_in = True
                    break
                else:
                    print("\nYour username or password was incorrect, please try again:\n")
                    logged_in = False
        break
        
while logged_in == True:
    print(f"Your account number is {account_no}.")
    
    login_choice = (input("\nView/modify login details: 0\nView all books: 1\nSearch books: 2\nAdd book to basket: 3\nmodify basket/checkout: 4\nView order history: 5\nLog out: 6\n"))
    
    while login_choice == '0':
        print('\nHere are your up to date login details:')
        print(f"\nUsername: {login_dict[key][0]}\nPassword: {login_dict[key][1]}\nFirst name: {login_dict[key][2]}\nLast name: {login_dict[key][3]}")
        ask_modify = int(input("\nModify username: Type 0\nModify password: Type 1\nModify firstname: Type 2\nModify lastname: Type 3\nSave changes and continue: 4\n"))
        if ask_modify == 4:
            #continue
            break
        else:
            modify_to = input("\nWhat would you like to change it to?\n")
            login_dict[key][ask_modify] = modify_to
            
    if login_choice == '1':
        for book in books:
            print(book)
            
    elif login_choice == '2':
        search = input("\nPlease enter the title of the book:\n")
        Book.search_book(search)
            
    elif login_choice == '3':
        while True:
            try:
                isbn_input = (input("Please enter an isbn code"))
                validate_isbn(isbn_input,valid_isbn)
                print("Valid")
                break
            except InvalidISBNError as e:
                print(f"Error: {e}")
    
        registered_cart.add_item(basket_dict[key],books)
        print('Book added to basket\n')
        print("Basket:")
        for item in basket_dict[key]:
            print(f"ISBN: {item[0]} Title: {item[1]}")
            
    elif login_choice == '4':
        print("\nCurrent basket:")
        for item in basket_dict[key]:
            print(f"ISBN: {item[0]} Title: {item[1]}")
            
        basket_option = input("\nModify your basket: Type 'm':\nProceed to checkout: Type 'c'\nReturn to menu: Hit 'Enter'\n")
        
        if basket_option == 'm':
            remove = input("\nTo remove an item: Type its ISBN code\nTo clear basket: type 'all'\n")
            registered_cart.remove_item(remove)
            for item in basket_dict[key]:
                print(f"ISBN: {item[0]} Title: {item[1]}")
                
        if basket_option == 'c':
            order_history[key].append(basket_dict[key][:])
            basket_dict[key].clear()
            print("\nPurchase successful!.\n")
            
        
    elif login_choice == '5':
        if order_history:
            print("\nOrder history:")
            for item in order_history[key]:
                print(item)
            print('--------------------------')
            
    elif login_choice == '6':
        break
